\section{Introduction}

This project is a template for making an Guile project that uses Noweb
with autotools.

\subsection{C}

<<file:hello-world.c>>=
#include <libguile.h>
#ifndef SCM_MAGIC_SNARFER 
#include <stdio.h>
#endif

SCM_DEFINE (scm_print_hello, "print-hello", 
            0, 1, 0,
            (SCM to),
            "Say hello.")
{
  if (SCM_UNBNDP(to)) {
    to = scm_from_locale_string("World");
  } 
 
  printf("Hello, %s!\n", scm_to_locale_string(to));
  return to;
}

void init_hello_world() 
{
#ifndef SCM_MAGIC_SNARFER 
#include "hello-world.c.x"
#endif
}
@ 

<<file:hello-world.h>>=
#include <libguile.h>
SCM scm_print_hello(SCM);
@ 


\subsection{Scheme}

<<file:hello-world.scm>>=
(define-module (hello-world)
  #:export (print-hello))

(load-extension "libguile-hello-world" "init_hello_world")
@ 

\section{Tests}

Unfortunately, the error reporting for what happens if there is a
missing symbol in libguile-hello-world is not great.  However, if we
link to it in this tiny test file, it'll be immediately clear what's
wrong.

<<file:hello-world-test.c>>=
#include "hello-world.h"
#include <libguile.h>

int main(int argc, char *argv[])
{
  scm_init_guile();
  scm_print_hello(scm_from_locale_string("C land"));
  return 0;
}
@

For completeness, let's include unit testing for scheme as well.

<<file:hello-world-test.scm>>=
(use-modules (check)
             (hello-world))
<<test>>
(check-report)
(check-exit)
@ 


<<test>>=
(check (print-hello) => "World")
(check (print-hello "Guile") => "Guile")
;(check #t => #f)
@
